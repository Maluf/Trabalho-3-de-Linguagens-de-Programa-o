/*
 * generated by Xtext 2.12.0
 */
grammar InternalSCH;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fm.pucrs.br.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fm.pucrs.br.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fm.pucrs.br.services.SCHGrammarAccess;

}

@parser::members {

 	private SCHGrammarAccess grammarAccess;

    public InternalSCHParser(TokenStream input, SCHGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SCHGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getExpressionsTerminalExpressionParserRuleCall_0());
			}
			lv_expressions_0_0=ruleTerminalExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"expressions",
					lv_expressions_0_0,
					"fm.pucrs.br.SCH.TerminalExpression");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleTerminalExpression
entryRuleTerminalExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTerminalExpressionRule()); }
	iv_ruleTerminalExpression=ruleTerminalExpression
	{ $current=$iv_ruleTerminalExpression.current; }
	EOF;

// Rule TerminalExpression
ruleTerminalExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			otherlv_0='('
			{
				newLeafNode(otherlv_0, grammarAccess.getTerminalExpressionAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getTerminalExpressionAccess().getExpressionParserRuleCall_0_1());
			}
			this_Expression_1=ruleExpression
			{
				$current = $this_Expression_1.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_2=')'
			{
				newLeafNode(otherlv_2, grammarAccess.getTerminalExpressionAccess().getRightParenthesisKeyword_0_2());
			}
		)
		    |
		(
			otherlv_3='('
			{
				newLeafNode(otherlv_3, grammarAccess.getTerminalExpressionAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getTerminalExpressionAccess().getDefineParserRuleCall_1_1());
			}
			this_Define_4=ruleDefine
			{
				$current = $this_Define_4.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_5=')'
			{
				newLeafNode(otherlv_5, grammarAccess.getTerminalExpressionAccess().getRightParenthesisKeyword_1_2());
			}
		)
		    |
		(
			otherlv_6='('
			{
				newLeafNode(otherlv_6, grammarAccess.getTerminalExpressionAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getTerminalExpressionAccess().getLambdaParserRuleCall_2_1());
			}
			this_Lambda_7=ruleLambda
			{
				$current = $this_Lambda_7.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_8=')'
			{
				newLeafNode(otherlv_8, grammarAccess.getTerminalExpressionAccess().getRightParenthesisKeyword_2_2());
			}
		)
		    |
		(
			otherlv_9='('
			{
				newLeafNode(otherlv_9, grammarAccess.getTerminalExpressionAccess().getLeftParenthesisKeyword_3_0());
			}
			{
				newCompositeNode(grammarAccess.getTerminalExpressionAccess().getIfParserRuleCall_3_1());
			}
			this_If_10=ruleIf
			{
				$current = $this_If_10.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_11=')'
			{
				newLeafNode(otherlv_11, grammarAccess.getTerminalExpressionAccess().getRightParenthesisKeyword_3_2());
			}
		)
		    |
		(
			(
				lv_value_12_0=RULE_INT
				{
					newLeafNode(lv_value_12_0, grammarAccess.getTerminalExpressionAccess().getValueINTTerminalRuleCall_4_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTerminalExpressionRule());
					}
					addWithLastConsumed(
						$current,
						"value",
						lv_value_12_0,
						"fm.pucrs.br.SCH.INT");
				}
			)
		)+
		    |
		(
			(
				lv_identifier_13_0=RULE_ID
				{
					newLeafNode(lv_identifier_13_0, grammarAccess.getTerminalExpressionAccess().getIdentifierIDTerminalRuleCall_5_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getTerminalExpressionRule());
					}
					addWithLastConsumed(
						$current,
						"identifier",
						lv_identifier_13_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)+
	)
;

// Entry rule entryRuleExpression
entryRuleExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current; }
	EOF;

// Rule Expression
ruleExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getOpOperatorParserRuleCall_0_0());
				}
				lv_op_0_0=ruleOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"op",
						lv_op_0_0,
						"fm.pucrs.br.SCH.Operator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getLeftTerminalExpressionParserRuleCall_1_0());
				}
				lv_left_1_0=ruleTerminalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					set(
						$current,
						"left",
						lv_left_1_0,
						"fm.pucrs.br.SCH.TerminalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getExpressionAccess().getRightTerminalExpressionParserRuleCall_2_0());
				}
				lv_right_2_0=ruleTerminalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExpressionRule());
					}
					add(
						$current,
						"right",
						lv_right_2_0,
						"fm.pucrs.br.SCH.TerminalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleDefine
entryRuleDefine returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefineRule()); }
	iv_ruleDefine=ruleDefine
	{ $current=$iv_ruleDefine.current; }
	EOF;

// Rule Define
ruleDefine returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='define'
		{
			newLeafNode(otherlv_0, grammarAccess.getDefineAccess().getDefineKeyword_0());
		}
		(
			(
				lv_id_1_0=RULE_ID
				{
					newLeafNode(lv_id_1_0, grammarAccess.getDefineAccess().getIdIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDefineRule());
					}
					setWithLastConsumed(
						$current,
						"id",
						lv_id_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getDefineAccess().getExTerminalExpressionParserRuleCall_2_0());
				}
				lv_ex_2_0=ruleTerminalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefineRule());
					}
					add(
						$current,
						"ex",
						lv_ex_2_0,
						"fm.pucrs.br.SCH.TerminalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)*
	)
;

// Entry rule entryRuleLambda
entryRuleLambda returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLambdaRule()); }
	iv_ruleLambda=ruleLambda
	{ $current=$iv_ruleLambda.current; }
	EOF;

// Rule Lambda
ruleLambda returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='lambda'
		{
			newLeafNode(otherlv_0, grammarAccess.getLambdaAccess().getLambdaKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getLambdaAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				lv_ouput_2_0=RULE_ID
				{
					newLeafNode(lv_ouput_2_0, grammarAccess.getLambdaAccess().getOuputIDTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getLambdaRule());
					}
					addWithLastConsumed(
						$current,
						"ouput",
						lv_ouput_2_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)*
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getLambdaAccess().getRightParenthesisKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getLambdaAccess().getExTerminalExpressionParserRuleCall_4_0());
				}
				lv_ex_4_0=ruleTerminalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLambdaRule());
					}
					set(
						$current,
						"ex",
						lv_ex_4_0,
						"fm.pucrs.br.SCH.TerminalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleIf
entryRuleIf returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfRule()); }
	iv_ruleIf=ruleIf
	{ $current=$iv_ruleIf.current; }
	EOF;

// Rule If
ruleIf returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfAccess().getIfKeyword_0());
		}
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getIfAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getLogicOperatorLogicOperatorParserRuleCall_2_0());
				}
				lv_logicOperator_2_0=ruleLogicOperator
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"logicOperator",
						lv_logicOperator_2_0,
						"fm.pucrs.br.SCH.LogicOperator");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getLeftConditionTerminalExpressionParserRuleCall_3_0());
				}
				lv_leftCondition_3_0=ruleTerminalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"leftCondition",
						lv_leftCondition_3_0,
						"fm.pucrs.br.SCH.TerminalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getRightConditionTerminalExpressionParserRuleCall_4_0());
				}
				lv_rightCondition_4_0=ruleTerminalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"rightCondition",
						lv_rightCondition_4_0,
						"fm.pucrs.br.SCH.TerminalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getIfAccess().getRightParenthesisKeyword_5());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfAccess().getResultTerminalExpressionParserRuleCall_6_0());
				}
				lv_result_6_0=ruleTerminalExpression
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfRule());
					}
					set(
						$current,
						"result",
						lv_result_6_0,
						"fm.pucrs.br.SCH.TerminalExpression");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleLogicOperator
entryRuleLogicOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLogicOperatorRule()); }
	iv_ruleLogicOperator=ruleLogicOperator
	{ $current=$iv_ruleLogicOperator.current; }
	EOF;

// Rule LogicOperator
ruleLogicOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getLogicOperatorAccess().getEqualParserRuleCall_0());
		}
		this_Equal_0=ruleEqual
		{
			$current = $this_Equal_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLogicOperatorAccess().getMoreOrEqualParserRuleCall_1());
		}
		this_MoreOrEqual_1=ruleMoreOrEqual
		{
			$current = $this_MoreOrEqual_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLogicOperatorAccess().getLessOrEqualParserRuleCall_2());
		}
		this_LessOrEqual_2=ruleLessOrEqual
		{
			$current = $this_LessOrEqual_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLogicOperatorAccess().getDifferentParserRuleCall_3());
		}
		this_Different_3=ruleDifferent
		{
			$current = $this_Different_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLogicOperatorAccess().getMoreParserRuleCall_4());
		}
		this_More_4=ruleMore
		{
			$current = $this_More_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getLogicOperatorAccess().getLessParserRuleCall_5());
		}
		this_Less_5=ruleLess
		{
			$current = $this_Less_5.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleEqual
entryRuleEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEqualRule()); }
	iv_ruleEqual=ruleEqual
	{ $current=$iv_ruleEqual.current; }
	EOF;

// Rule Equal
ruleEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_equal_0_0='='
			{
				newLeafNode(lv_equal_0_0, grammarAccess.getEqualAccess().getEqualEqualsSignKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getEqualRule());
				}
				setWithLastConsumed($current, "equal", lv_equal_0_0, "=");
			}
		)
	)
;

// Entry rule entryRuleMoreOrEqual
entryRuleMoreOrEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoreOrEqualRule()); }
	iv_ruleMoreOrEqual=ruleMoreOrEqual
	{ $current=$iv_ruleMoreOrEqual.current; }
	EOF;

// Rule MoreOrEqual
ruleMoreOrEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_moreOrEqual_0_0='>='
			{
				newLeafNode(lv_moreOrEqual_0_0, grammarAccess.getMoreOrEqualAccess().getMoreOrEqualGreaterThanSignEqualsSignKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getMoreOrEqualRule());
				}
				setWithLastConsumed($current, "moreOrEqual", lv_moreOrEqual_0_0, ">=");
			}
		)
	)
;

// Entry rule entryRuleLessOrEqual
entryRuleLessOrEqual returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLessOrEqualRule()); }
	iv_ruleLessOrEqual=ruleLessOrEqual
	{ $current=$iv_ruleLessOrEqual.current; }
	EOF;

// Rule LessOrEqual
ruleLessOrEqual returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_lessOrEqual_0_0='<='
			{
				newLeafNode(lv_lessOrEqual_0_0, grammarAccess.getLessOrEqualAccess().getLessOrEqualLessThanSignEqualsSignKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLessOrEqualRule());
				}
				setWithLastConsumed($current, "lessOrEqual", lv_lessOrEqual_0_0, "<=");
			}
		)
	)
;

// Entry rule entryRuleDifferent
entryRuleDifferent returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDifferentRule()); }
	iv_ruleDifferent=ruleDifferent
	{ $current=$iv_ruleDifferent.current; }
	EOF;

// Rule Different
ruleDifferent returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_different_0_0='!='
			{
				newLeafNode(lv_different_0_0, grammarAccess.getDifferentAccess().getDifferentExclamationMarkEqualsSignKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDifferentRule());
				}
				setWithLastConsumed($current, "different", lv_different_0_0, "!=");
			}
		)
	)
;

// Entry rule entryRuleMore
entryRuleMore returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoreRule()); }
	iv_ruleMore=ruleMore
	{ $current=$iv_ruleMore.current; }
	EOF;

// Rule More
ruleMore returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_more_0_0='>'
			{
				newLeafNode(lv_more_0_0, grammarAccess.getMoreAccess().getMoreGreaterThanSignKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getMoreRule());
				}
				setWithLastConsumed($current, "more", lv_more_0_0, ">");
			}
		)
	)
;

// Entry rule entryRuleLess
entryRuleLess returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLessRule()); }
	iv_ruleLess=ruleLess
	{ $current=$iv_ruleLess.current; }
	EOF;

// Rule Less
ruleLess returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_less_0_0='<'
			{
				newLeafNode(lv_less_0_0, grammarAccess.getLessAccess().getLessLessThanSignKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getLessRule());
				}
				setWithLastConsumed($current, "less", lv_less_0_0, "<");
			}
		)
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current; }
	EOF;

// Rule Operator
ruleOperator returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperatorAccess().getDivideParserRuleCall_0());
		}
		this_Divide_0=ruleDivide
		{
			$current = $this_Divide_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperatorAccess().getMultiplyParserRuleCall_1());
		}
		this_Multiply_1=ruleMultiply
		{
			$current = $this_Multiply_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperatorAccess().getAddParserRuleCall_2());
		}
		this_Add_2=ruleAdd
		{
			$current = $this_Add_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperatorAccess().getSubtractParserRuleCall_3());
		}
		this_Subtract_3=ruleSubtract
		{
			$current = $this_Subtract_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSubtract
entryRuleSubtract returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSubtractRule()); }
	iv_ruleSubtract=ruleSubtract
	{ $current=$iv_ruleSubtract.current; }
	EOF;

// Rule Subtract
ruleSubtract returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_minus_0_0='-'
			{
				newLeafNode(lv_minus_0_0, grammarAccess.getSubtractAccess().getMinusHyphenMinusKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getSubtractRule());
				}
				setWithLastConsumed($current, "minus", lv_minus_0_0, "-");
			}
		)
	)
;

// Entry rule entryRuleAdd
entryRuleAdd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddRule()); }
	iv_ruleAdd=ruleAdd
	{ $current=$iv_ruleAdd.current; }
	EOF;

// Rule Add
ruleAdd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_plus_0_0='+'
			{
				newLeafNode(lv_plus_0_0, grammarAccess.getAddAccess().getPlusPlusSignKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getAddRule());
				}
				setWithLastConsumed($current, "plus", lv_plus_0_0, "+");
			}
		)
	)
;

// Entry rule entryRuleMultiply
entryRuleMultiply returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplyRule()); }
	iv_ruleMultiply=ruleMultiply
	{ $current=$iv_ruleMultiply.current; }
	EOF;

// Rule Multiply
ruleMultiply returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_times_0_0='*'
			{
				newLeafNode(lv_times_0_0, grammarAccess.getMultiplyAccess().getTimesAsteriskKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getMultiplyRule());
				}
				setWithLastConsumed($current, "times", lv_times_0_0, "*");
			}
		)
	)
;

// Entry rule entryRuleDivide
entryRuleDivide returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDivideRule()); }
	iv_ruleDivide=ruleDivide
	{ $current=$iv_ruleDivide.current; }
	EOF;

// Rule Divide
ruleDivide returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_diveded_0_0='/'
			{
				newLeafNode(lv_diveded_0_0, grammarAccess.getDivideAccess().getDivededSolidusKeyword_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getDivideRule());
				}
				setWithLastConsumed($current, "diveded", lv_diveded_0_0, "/");
			}
		)
	)
;

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_INT : ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
