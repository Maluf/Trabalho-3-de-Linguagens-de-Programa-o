/*
 * generated by Xtext 2.12.0
 */
grammar InternalSCH;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package fm.pucrs.br.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package fm.pucrs.br.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import fm.pucrs.br.services.SCHGrammarAccess;

}

@parser::members {

 	private SCHGrammarAccess grammarAccess;

    public InternalSCHParser(TokenStream input, SCHGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected SCHGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getExpressionsExpressionParserRuleCall_0());
			}
			lv_expressions_0_0=ruleExpression
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"expressions",
					lv_expressions_0_0,
					"fm.pucrs.br.SCH.Expression");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleExpression
entryRuleExpression returns [String current=null]:
	{ newCompositeNode(grammarAccess.getExpressionRule()); }
	iv_ruleExpression=ruleExpression
	{ $current=$iv_ruleExpression.current.getText(); }
	EOF;

// Rule Expression
ruleExpression returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_0_0());
			}
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getOperatorParserRuleCall_0_1());
			}
			this_Operator_1=ruleOperator
			{
				$current.merge(this_Operator_1);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getExpressionParserRuleCall_0_2());
			}
			this_Expression_2=ruleExpression
			{
				$current.merge(this_Expression_2);
			}
			{
				afterParserOrEnumRuleCall();
			}
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getExpressionParserRuleCall_0_3());
			}
			this_Expression_3=ruleExpression
			{
				$current.merge(this_Expression_3);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_0_4());
			}
		)
		    |
		(
			kw='('
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionAccess().getLeftParenthesisKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExpressionAccess().getExpressionParserRuleCall_1_1());
			}
			this_Expression_6=ruleExpression
			{
				$current.merge(this_Expression_6);
			}
			{
				afterParserOrEnumRuleCall();
			}
			kw=')'
			{
				$current.merge(kw);
				newLeafNode(kw, grammarAccess.getExpressionAccess().getRightParenthesisKeyword_1_2());
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getExpressionAccess().getValueParserRuleCall_2());
		}
		this_Value_8=ruleValue
		{
			$current.merge(this_Value_8);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleValue
entryRuleValue returns [String current=null]:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	iv_ruleValue=ruleValue
	{ $current=$iv_ruleValue.current.getText(); }
	EOF;

// Rule Value
ruleValue returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_INT_0=RULE_INT
		{
			$current.merge(this_INT_0);
		}
		{
			newLeafNode(this_INT_0, grammarAccess.getValueAccess().getINTTerminalRuleCall_0());
		}
		    |
		this_DOUBLE_1=RULE_DOUBLE
		{
			$current.merge(this_DOUBLE_1);
		}
		{
			newLeafNode(this_DOUBLE_1, grammarAccess.getValueAccess().getDOUBLETerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleOperator
entryRuleOperator returns [String current=null]:
	{ newCompositeNode(grammarAccess.getOperatorRule()); }
	iv_ruleOperator=ruleOperator
	{ $current=$iv_ruleOperator.current.getText(); }
	EOF;

// Rule Operator
ruleOperator returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOperatorAccess().getDivideParserRuleCall_0());
		}
		this_Divide_0=ruleDivide
		{
			$current.merge(this_Divide_0);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperatorAccess().getMultiplyParserRuleCall_1());
		}
		this_Multiply_1=ruleMultiply
		{
			$current.merge(this_Multiply_1);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperatorAccess().getAddParserRuleCall_2());
		}
		this_Add_2=ruleAdd
		{
			$current.merge(this_Add_2);
		}
		{
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOperatorAccess().getSubtractParserRuleCall_3());
		}
		this_Subtract_3=ruleSubtract
		{
			$current.merge(this_Subtract_3);
		}
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleSubtract
entryRuleSubtract returns [String current=null]:
	{ newCompositeNode(grammarAccess.getSubtractRule()); }
	iv_ruleSubtract=ruleSubtract
	{ $current=$iv_ruleSubtract.current.getText(); }
	EOF;

// Rule Subtract
ruleSubtract returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='-'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getSubtractAccess().getHyphenMinusKeyword());
	}
;

// Entry rule entryRuleAdd
entryRuleAdd returns [String current=null]:
	{ newCompositeNode(grammarAccess.getAddRule()); }
	iv_ruleAdd=ruleAdd
	{ $current=$iv_ruleAdd.current.getText(); }
	EOF;

// Rule Add
ruleAdd returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='+'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getAddAccess().getPlusSignKeyword());
	}
;

// Entry rule entryRuleMultiply
entryRuleMultiply returns [String current=null]:
	{ newCompositeNode(grammarAccess.getMultiplyRule()); }
	iv_ruleMultiply=ruleMultiply
	{ $current=$iv_ruleMultiply.current.getText(); }
	EOF;

// Rule Multiply
ruleMultiply returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='*'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getMultiplyAccess().getAsteriskKeyword());
	}
;

// Entry rule entryRuleDivide
entryRuleDivide returns [String current=null]:
	{ newCompositeNode(grammarAccess.getDivideRule()); }
	iv_ruleDivide=ruleDivide
	{ $current=$iv_ruleDivide.current.getText(); }
	EOF;

// Rule Divide
ruleDivide returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='/'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getDivideAccess().getSolidusKeyword());
	}
;

RULE_DOUBLE : RULE_INT '.' RULE_INT;

RULE_INT : ('0'..'9')+;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
