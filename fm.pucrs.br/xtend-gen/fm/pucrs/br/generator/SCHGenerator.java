/**
 * generated by Xtext 2.12.0
 */
package fm.pucrs.br.generator;

import com.google.common.collect.Iterables;
import fm.pucrs.br.sCH.Atom;
import fm.pucrs.br.sCH.Expression;
import fm.pucrs.br.sCH.List;
import fm.pucrs.br.sCH.Program;
import java.util.Arrays;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SCHGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    fsa.generateFile("Schemer.java", this.start(resource));
  }
  
  public CharSequence start(final Resource r) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("// Generated By Felipe Guedes and Guilherme Maluf");
    _builder.newLine();
    _builder.append("package default;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class Schemer{");
    _builder.newLine();
    _builder.append("public static void main(String[] args) throws Exception {");
    _builder.newLine();
    {
      Iterable<Program> _filter = Iterables.<Program>filter(IteratorExtensions.<EObject>toIterable(r.getAllContents()), Program.class);
      for(final Program p : _filter) {
        {
          EList<Expression> _expressions = p.getExpressions();
          for(final Expression e : _expressions) {
            _builder.append("\t");
            CharSequence _compile = this.compile(e);
            _builder.append(_compile, "\t");
            _builder.newLineIfNotEmpty();
          }
        }
      }
    }
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected CharSequence _compile(final Atom at) {
    StringConcatenation _builder = new StringConcatenation();
    int _ivalue = at.getIvalue();
    _builder.append(_ivalue);
    _builder.append(" ");
    String _bvalue = at.getBvalue();
    _builder.append(_bvalue);
    _builder.append("\t");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  protected CharSequence _compile(final List li) {
    StringConcatenation _builder = new StringConcatenation();
    String _called = li.getCalled();
    _builder.append(_called);
    _builder.append("( ");
    {
      EList<Expression> _params = li.getParams();
      for(final Expression p : _params) {
        _builder.append(" ");
        Object _compile = this.compile(p);
        _builder.append(_compile);
        _builder.append(", ");
      }
    }
    _builder.append(" );");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final Expression at) {
    if (at instanceof Atom) {
      return _compile((Atom)at);
    } else if (at instanceof List) {
      return _compile((List)at);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(at).toString());
    }
  }
}
