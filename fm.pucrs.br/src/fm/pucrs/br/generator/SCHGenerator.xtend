/*
 * generated by Xtext 2.12.0
 */
package fm.pucrs.br.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import fm.pucrs.br.sCH.Model
import fm.pucrs.br.sCH.Expression
import fm.pucrs.br.sCH.Operator
import fm.pucrs.br.sCH.Add
import fm.pucrs.br.sCH.Divide

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SCHGenerator extends AbstractGenerator {

	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		fsa.generateFile('App.java', resource.start);

	}
	
	def CharSequence getStart(Resource r) '''
		// Generated By Felipe Guedes e Gabriel Maluf
		package default;
		
		public class App
		{
			public static void main(String[] args) throws Exception {
				System.out.println("Teste");
«««				« FOR m : r.allContents.toIterable.filter(Model) »
«««						« FOR ex : m.expressions »
«««							«ex.compile»
«««						«ENDFOR»		
«««				«ENDFOR»	
			}
		}
	'''
	
//	def dispatch compile(Expression expression)'''
//	System.out.println("Teste");
//	'''
	
//	def void compile(Expression expression) '''
//		int i = «expression.compile»;
//	 '''
	
	
	
	
//	def dispatch compile(Add a) 
//	'''+'''
	
//	def dispatch compile(Divide d) '''
//		«d.diveded = '''+''' »
//	'''
//	
//	def dispatch compile(Add a) '''
//		«a.plus = '''+''' »
//	'''
//	
//	def dispatch compile(Add a) '''
//		«a.plus = '''+''' »
//	'''
}
