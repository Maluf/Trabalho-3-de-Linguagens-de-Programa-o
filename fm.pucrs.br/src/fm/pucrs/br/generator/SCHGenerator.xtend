/*
 * generated by Xtext 2.12.0
 */
package fm.pucrs.br.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext

import fm.pucrs.br.sCH.Program
import fm.pucrs.br.sCH.Atom
import fm.pucrs.br.sCH.List
import fm.pucrs.br.sCH.INTexp
import fm.pucrs.br.sCH.BOOLexp
import fm.pucrs.br.sCH.DOUBLEexp
import fm.pucrs.br.sCH.IDexp
import fm.pucrs.br.sCH.STRexp

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class SCHGenerator extends AbstractGenerator {
override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
	fsa.generateFile('Schemer.java', resource.start);
}
//«»

def start(Resource r) '''
// Generated By Felipe Guedes and Guilherme Maluf
package default;

public class Schemer{
public static void main(String[] args) throws Exception {
	«FOR p : r.allContents.toIterable.filter(Program)»
		« FOR e : p.expressions »
			«e.compile»
		«ENDFOR» 
	«ENDFOR» 
	}
}
'''

def dispatch compile(Atom at) '''«at.generateAtom»'''

def dispatch compile(List li) '''
	«IF li.called.toString == '+' || li.called.toString == '-' ||
	li.called.toString == '*' || li.called.toString == '/'»
		(«FOR p : li.params SEPARATOR ' '+li.called AFTER ''» «p.compile» «ENDFOR» )
	«ELSEIF li.called.toString == 'def'»
		var	 «li.params.remove(0).compile» = («FOR p : li.params SEPARATOR ' '+li.called AFTER ''» «p.compile» «ENDFOR» ) ;
	«ELSE»
		«li.called»(«FOR p : li.params SEPARATOR ',' AFTER ''» «p.compile» «ENDFOR»  )
	«ENDIF»
'''
	

def dispatch generateAtom(IDexp e)'''«e.name»'''

def dispatch generateAtom(INTexp e)'''«e.ivalue»'''

def dispatch generateAtom(DOUBLEexp e)'''«e.dvalue»'''

def dispatch generateAtom(STRexp e)'''«e.ivalue»'''

def dispatch generateAtom(BOOLexp e)'''«e.bvalue»'''
		
}