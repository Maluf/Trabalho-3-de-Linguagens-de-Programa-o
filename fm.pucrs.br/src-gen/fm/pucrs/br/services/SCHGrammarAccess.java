/*
 * generated by Xtext 2.12.0
 */
package fm.pucrs.br.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SCHGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Model");
		private final Assignment cExpressionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionsExpressionParserRuleCall_0 = (RuleCall)cExpressionsAssignment.eContents().get(0);
		
		//Model:
		//	expressions+=Expression*;
		@Override public ParserRule getRule() { return rule; }
		
		//expressions+=Expression*
		public Assignment getExpressionsAssignment() { return cExpressionsAssignment; }
		
		//Expression
		public RuleCall getExpressionsExpressionParserRuleCall_0() { return cExpressionsExpressionParserRuleCall_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Expression");
		private final Assignment cXAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cXValueParserRuleCall_0 = (RuleCall)cXAssignment.eContents().get(0);
		
		//Expression:
		//	x=Value //'(' Operator Expression Expression ')' | '(' Expression ')' | 
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//x=Value
		public Assignment getXAssignment() { return cXAssignment; }
		
		//Value
		public RuleCall getXValueParserRuleCall_0() { return cXValueParserRuleCall_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	INT | DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_1() { return cDOUBLETerminalRuleCall_1; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDivideParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiplyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAddParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSubtractParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Operator:
		//	Divide | Multiply | Add | Subtract;
		@Override public ParserRule getRule() { return rule; }
		
		//Divide | Multiply | Add | Subtract
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Divide
		public RuleCall getDivideParserRuleCall_0() { return cDivideParserRuleCall_0; }
		
		//Multiply
		public RuleCall getMultiplyParserRuleCall_1() { return cMultiplyParserRuleCall_1; }
		
		//Add
		public RuleCall getAddParserRuleCall_2() { return cAddParserRuleCall_2; }
		
		//Subtract
		public RuleCall getSubtractParserRuleCall_3() { return cSubtractParserRuleCall_3; }
	}
	public class SubtractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Subtract");
		private final Keyword cHyphenMinusKeyword = (Keyword)rule.eContents().get(1);
		
		//Subtract:
		//	"-";
		@Override public ParserRule getRule() { return rule; }
		
		//"-"
		public Keyword getHyphenMinusKeyword() { return cHyphenMinusKeyword; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Add");
		private final Keyword cPlusSignKeyword = (Keyword)rule.eContents().get(1);
		
		//Add:
		//	'+';
		@Override public ParserRule getRule() { return rule; }
		
		//'+'
		public Keyword getPlusSignKeyword() { return cPlusSignKeyword; }
	}
	public class MultiplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Multiply");
		private final Keyword cAsteriskKeyword = (Keyword)rule.eContents().get(1);
		
		//Multiply:
		//	'*';
		@Override public ParserRule getRule() { return rule; }
		
		//'*'
		public Keyword getAsteriskKeyword() { return cAsteriskKeyword; }
	}
	public class DivideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Divide");
		private final Keyword cSolidusKeyword = (Keyword)rule.eContents().get(1);
		
		//Divide:
		//	"/";
		@Override public ParserRule getRule() { return rule; }
		
		//"/"
		public Keyword getSolidusKeyword() { return cSolidusKeyword; }
	}
	
	
	private final ModelElements pModel;
	private final ExpressionElements pExpression;
	private final ValueElements pValue;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tINT;
	private final OperatorElements pOperator;
	private final SubtractElements pSubtract;
	private final AddElements pAdd;
	private final MultiplyElements pMultiply;
	private final DivideElements pDivide;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SCHGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pExpression = new ExpressionElements();
		this.pValue = new ValueElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.DOUBLE");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.INT");
		this.pOperator = new OperatorElements();
		this.pSubtract = new SubtractElements();
		this.pAdd = new AddElements();
		this.pMultiply = new MultiplyElements();
		this.pDivide = new DivideElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fm.pucrs.br.SCH".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	expressions+=Expression*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Expression:
	//	x=Value //'(' Operator Expression Expression ')' | '(' Expression ')' | 
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Value:
	//	INT | DOUBLE;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	INT ("." INT)?;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//@ Override terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//Operator:
	//	Divide | Multiply | Add | Subtract;
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Subtract:
	//	"-";
	public SubtractElements getSubtractAccess() {
		return pSubtract;
	}
	
	public ParserRule getSubtractRule() {
		return getSubtractAccess().getRule();
	}
	
	//Add:
	//	'+';
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Multiply:
	//	'*';
	public MultiplyElements getMultiplyAccess() {
		return pMultiply;
	}
	
	public ParserRule getMultiplyRule() {
		return getMultiplyAccess().getRule();
	}
	
	//Divide:
	//	"/";
	public DivideElements getDivideAccess() {
		return pDivide;
	}
	
	public ParserRule getDivideRule() {
		return getDivideAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
