/*
 * generated by Xtext 2.12.0
 */
package fm.pucrs.br.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SCHGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Model");
		private final Assignment cExpressionsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cExpressionsTerminalExpressionParserRuleCall_0 = (RuleCall)cExpressionsAssignment.eContents().get(0);
		
		//Model:
		//	expressions+=TerminalExpression*;
		@Override public ParserRule getRule() { return rule; }
		
		//expressions+=TerminalExpression*
		public Assignment getExpressionsAssignment() { return cExpressionsAssignment; }
		
		//TerminalExpression
		public RuleCall getExpressionsTerminalExpressionParserRuleCall_0() { return cExpressionsTerminalExpressionParserRuleCall_0; }
	}
	public class TerminalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.TerminalExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cExpressionParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cDefineParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Assignment cValueAssignment_2 = (Assignment)cAlternatives.eContents().get(2);
		private final RuleCall cValueINTTerminalRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//TerminalExpression Expression:
		//	'(' Expression ')' | '(' Define ')' | value+=INT+;
		@Override public ParserRule getRule() { return rule; }
		
		//'(' Expression ')' | '(' Define ')' | value+=INT+
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'(' Expression ')'
		public Group getGroup_0() { return cGroup_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_0_0() { return cLeftParenthesisKeyword_0_0; }
		
		//Expression
		public RuleCall getExpressionParserRuleCall_0_1() { return cExpressionParserRuleCall_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_0_2() { return cRightParenthesisKeyword_0_2; }
		
		//'(' Define ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Define
		public RuleCall getDefineParserRuleCall_1_1() { return cDefineParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
		
		//value+=INT+
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_2_0() { return cValueINTTerminalRuleCall_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Expression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOpAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cOpOperatorParserRuleCall_0_0 = (RuleCall)cOpAssignment_0.eContents().get(0);
		private final Assignment cLeftAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cLeftTerminalExpressionParserRuleCall_1_0 = (RuleCall)cLeftAssignment_1.eContents().get(0);
		private final Assignment cRightAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRightTerminalExpressionParserRuleCall_2_0 = (RuleCall)cRightAssignment_2.eContents().get(0);
		
		//Expression:
		//	op=Operator left=TerminalExpression right+=TerminalExpression*;
		@Override public ParserRule getRule() { return rule; }
		
		//op=Operator left=TerminalExpression right+=TerminalExpression*
		public Group getGroup() { return cGroup; }
		
		//op=Operator
		public Assignment getOpAssignment_0() { return cOpAssignment_0; }
		
		//Operator
		public RuleCall getOpOperatorParserRuleCall_0_0() { return cOpOperatorParserRuleCall_0_0; }
		
		//left=TerminalExpression
		public Assignment getLeftAssignment_1() { return cLeftAssignment_1; }
		
		//TerminalExpression
		public RuleCall getLeftTerminalExpressionParserRuleCall_1_0() { return cLeftTerminalExpressionParserRuleCall_1_0; }
		
		//right+=TerminalExpression*
		public Assignment getRightAssignment_2() { return cRightAssignment_2; }
		
		//TerminalExpression
		public RuleCall getRightTerminalExpressionParserRuleCall_2_0() { return cRightTerminalExpressionParserRuleCall_2_0; }
	}
	public class DefineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Define");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDefineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdIDTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Assignment cExAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cExTerminalExpressionParserRuleCall_2_0 = (RuleCall)cExAssignment_2.eContents().get(0);
		
		//Define:
		//	'define' id=ID ex+=TerminalExpression*;
		@Override public ParserRule getRule() { return rule; }
		
		//'define' id=ID ex+=TerminalExpression*
		public Group getGroup() { return cGroup; }
		
		//'define'
		public Keyword getDefineKeyword_0() { return cDefineKeyword_0; }
		
		//id=ID
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//ID
		public RuleCall getIdIDTerminalRuleCall_1_0() { return cIdIDTerminalRuleCall_1_0; }
		
		//ex+=TerminalExpression*
		public Assignment getExAssignment_2() { return cExAssignment_2; }
		
		//TerminalExpression
		public RuleCall getExTerminalExpressionParserRuleCall_2_0() { return cExTerminalExpressionParserRuleCall_2_0; }
	}
	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cDOUBLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Value:
		//	INT | DOUBLE;
		@Override public ParserRule getRule() { return rule; }
		
		//INT | DOUBLE
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//DOUBLE
		public RuleCall getDOUBLETerminalRuleCall_1() { return cDOUBLETerminalRuleCall_1; }
	}
	public class OperatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDivideParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cMultiplyParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cAddParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSubtractParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Operator:
		//	Divide | Multiply | Add | Subtract;
		@Override public ParserRule getRule() { return rule; }
		
		//Divide | Multiply | Add | Subtract
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Divide
		public RuleCall getDivideParserRuleCall_0() { return cDivideParserRuleCall_0; }
		
		//Multiply
		public RuleCall getMultiplyParserRuleCall_1() { return cMultiplyParserRuleCall_1; }
		
		//Add
		public RuleCall getAddParserRuleCall_2() { return cAddParserRuleCall_2; }
		
		//Subtract
		public RuleCall getSubtractParserRuleCall_3() { return cSubtractParserRuleCall_3; }
	}
	public class SubtractElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Subtract");
		private final Assignment cMinusAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cMinusHyphenMinusKeyword_0 = (Keyword)cMinusAssignment.eContents().get(0);
		
		//Subtract:
		//	minus="-";
		@Override public ParserRule getRule() { return rule; }
		
		//minus="-"
		public Assignment getMinusAssignment() { return cMinusAssignment; }
		
		//"-"
		public Keyword getMinusHyphenMinusKeyword_0() { return cMinusHyphenMinusKeyword_0; }
	}
	public class AddElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Add");
		private final Assignment cPlusAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cPlusPlusSignKeyword_0 = (Keyword)cPlusAssignment.eContents().get(0);
		
		//Add:
		//	plus='+';
		@Override public ParserRule getRule() { return rule; }
		
		//plus='+'
		public Assignment getPlusAssignment() { return cPlusAssignment; }
		
		//'+'
		public Keyword getPlusPlusSignKeyword_0() { return cPlusPlusSignKeyword_0; }
	}
	public class MultiplyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Multiply");
		private final Assignment cTimesAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cTimesAsteriskKeyword_0 = (Keyword)cTimesAssignment.eContents().get(0);
		
		//Multiply:
		//	times='*';
		@Override public ParserRule getRule() { return rule; }
		
		//times='*'
		public Assignment getTimesAssignment() { return cTimesAssignment; }
		
		//'*'
		public Keyword getTimesAsteriskKeyword_0() { return cTimesAsteriskKeyword_0; }
	}
	public class DivideElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.Divide");
		private final Assignment cDivededAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cDivededSolidusKeyword_0 = (Keyword)cDivededAssignment.eContents().get(0);
		
		//Divide:
		//	diveded="/";
		@Override public ParserRule getRule() { return rule; }
		
		//diveded="/"
		public Assignment getDivededAssignment() { return cDivededAssignment; }
		
		//"/"
		public Keyword getDivededSolidusKeyword_0() { return cDivededSolidusKeyword_0; }
	}
	
	
	private final ModelElements pModel;
	private final TerminalExpressionElements pTerminalExpression;
	private final ExpressionElements pExpression;
	private final DefineElements pDefine;
	private final ValueElements pValue;
	private final TerminalRule tDOUBLE;
	private final TerminalRule tINT;
	private final OperatorElements pOperator;
	private final SubtractElements pSubtract;
	private final AddElements pAdd;
	private final MultiplyElements pMultiply;
	private final DivideElements pDivide;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SCHGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pTerminalExpression = new TerminalExpressionElements();
		this.pExpression = new ExpressionElements();
		this.pDefine = new DefineElements();
		this.pValue = new ValueElements();
		this.tDOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.DOUBLE");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "fm.pucrs.br.SCH.INT");
		this.pOperator = new OperatorElements();
		this.pSubtract = new SubtractElements();
		this.pAdd = new AddElements();
		this.pMultiply = new MultiplyElements();
		this.pDivide = new DivideElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("fm.pucrs.br.SCH".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	expressions+=TerminalExpression*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//TerminalExpression Expression:
	//	'(' Expression ')' | '(' Define ')' | value+=INT+;
	public TerminalExpressionElements getTerminalExpressionAccess() {
		return pTerminalExpression;
	}
	
	public ParserRule getTerminalExpressionRule() {
		return getTerminalExpressionAccess().getRule();
	}
	
	//Expression:
	//	op=Operator left=TerminalExpression right+=TerminalExpression*;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//Define:
	//	'define' id=ID ex+=TerminalExpression*;
	public DefineElements getDefineAccess() {
		return pDefine;
	}
	
	public ParserRule getDefineRule() {
		return getDefineAccess().getRule();
	}
	
	//Value:
	//	INT | DOUBLE;
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}
	
	//terminal DOUBLE returns ecore::EDouble:
	//	INT "." INT;
	public TerminalRule getDOUBLERule() {
		return tDOUBLE;
	}
	
	//@ Override terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//Operator:
	//	Divide | Multiply | Add | Subtract;
	public OperatorElements getOperatorAccess() {
		return pOperator;
	}
	
	public ParserRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}
	
	//Subtract:
	//	minus="-";
	public SubtractElements getSubtractAccess() {
		return pSubtract;
	}
	
	public ParserRule getSubtractRule() {
		return getSubtractAccess().getRule();
	}
	
	//Add:
	//	plus='+';
	public AddElements getAddAccess() {
		return pAdd;
	}
	
	public ParserRule getAddRule() {
		return getAddAccess().getRule();
	}
	
	//Multiply:
	//	times='*';
	public MultiplyElements getMultiplyAccess() {
		return pMultiply;
	}
	
	public ParserRule getMultiplyRule() {
		return getMultiplyAccess().getRule();
	}
	
	//Divide:
	//	diveded="/";
	public DivideElements getDivideAccess() {
		return pDivide;
	}
	
	public ParserRule getDivideRule() {
		return getDivideAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
