/**
 * generated by Xtext 2.12.0
 */
package fm.pucrs.br.sCH.impl;

import fm.pucrs.br.sCH.LessOrEqual;
import fm.pucrs.br.sCH.SCHPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Less Or Equal</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fm.pucrs.br.sCH.impl.LessOrEqualImpl#getLessOrEqual <em>Less Or Equal</em>}</li>
 * </ul>
 *
 * @generated
 */
public class LessOrEqualImpl extends LogicOperatorImpl implements LessOrEqual
{
  /**
   * The default value of the '{@link #getLessOrEqual() <em>Less Or Equal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLessOrEqual()
   * @generated
   * @ordered
   */
  protected static final String LESS_OR_EQUAL_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getLessOrEqual() <em>Less Or Equal</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLessOrEqual()
   * @generated
   * @ordered
   */
  protected String lessOrEqual = LESS_OR_EQUAL_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected LessOrEqualImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SCHPackage.Literals.LESS_OR_EQUAL;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getLessOrEqual()
  {
    return lessOrEqual;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLessOrEqual(String newLessOrEqual)
  {
    String oldLessOrEqual = lessOrEqual;
    lessOrEqual = newLessOrEqual;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SCHPackage.LESS_OR_EQUAL__LESS_OR_EQUAL, oldLessOrEqual, lessOrEqual));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SCHPackage.LESS_OR_EQUAL__LESS_OR_EQUAL:
        return getLessOrEqual();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SCHPackage.LESS_OR_EQUAL__LESS_OR_EQUAL:
        setLessOrEqual((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SCHPackage.LESS_OR_EQUAL__LESS_OR_EQUAL:
        setLessOrEqual(LESS_OR_EQUAL_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SCHPackage.LESS_OR_EQUAL__LESS_OR_EQUAL:
        return LESS_OR_EQUAL_EDEFAULT == null ? lessOrEqual != null : !LESS_OR_EQUAL_EDEFAULT.equals(lessOrEqual);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (lessOrEqual: ");
    result.append(lessOrEqual);
    result.append(')');
    return result.toString();
  }

} //LessOrEqualImpl
