/**
 * generated by Xtext 2.12.0
 */
package fm.pucrs.br.sCH.impl;

import fm.pucrs.br.sCH.Expression;
import fm.pucrs.br.sCH.If;
import fm.pucrs.br.sCH.LogicOperator;
import fm.pucrs.br.sCH.SCHPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>If</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link fm.pucrs.br.sCH.impl.IfImpl#getLogicOperator <em>Logic Operator</em>}</li>
 *   <li>{@link fm.pucrs.br.sCH.impl.IfImpl#getLeftCondition <em>Left Condition</em>}</li>
 *   <li>{@link fm.pucrs.br.sCH.impl.IfImpl#getRightCondition <em>Right Condition</em>}</li>
 *   <li>{@link fm.pucrs.br.sCH.impl.IfImpl#getResult <em>Result</em>}</li>
 * </ul>
 *
 * @generated
 */
public class IfImpl extends ExpressionImpl implements If
{
  /**
   * The cached value of the '{@link #getLogicOperator() <em>Logic Operator</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLogicOperator()
   * @generated
   * @ordered
   */
  protected LogicOperator logicOperator;

  /**
   * The cached value of the '{@link #getLeftCondition() <em>Left Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLeftCondition()
   * @generated
   * @ordered
   */
  protected Expression leftCondition;

  /**
   * The cached value of the '{@link #getRightCondition() <em>Right Condition</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRightCondition()
   * @generated
   * @ordered
   */
  protected Expression rightCondition;

  /**
   * The cached value of the '{@link #getResult() <em>Result</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getResult()
   * @generated
   * @ordered
   */
  protected Expression result;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected IfImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SCHPackage.Literals.IF;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public LogicOperator getLogicOperator()
  {
    return logicOperator;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLogicOperator(LogicOperator newLogicOperator, NotificationChain msgs)
  {
    LogicOperator oldLogicOperator = logicOperator;
    logicOperator = newLogicOperator;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SCHPackage.IF__LOGIC_OPERATOR, oldLogicOperator, newLogicOperator);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLogicOperator(LogicOperator newLogicOperator)
  {
    if (newLogicOperator != logicOperator)
    {
      NotificationChain msgs = null;
      if (logicOperator != null)
        msgs = ((InternalEObject)logicOperator).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SCHPackage.IF__LOGIC_OPERATOR, null, msgs);
      if (newLogicOperator != null)
        msgs = ((InternalEObject)newLogicOperator).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SCHPackage.IF__LOGIC_OPERATOR, null, msgs);
      msgs = basicSetLogicOperator(newLogicOperator, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SCHPackage.IF__LOGIC_OPERATOR, newLogicOperator, newLogicOperator));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getLeftCondition()
  {
    return leftCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetLeftCondition(Expression newLeftCondition, NotificationChain msgs)
  {
    Expression oldLeftCondition = leftCondition;
    leftCondition = newLeftCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SCHPackage.IF__LEFT_CONDITION, oldLeftCondition, newLeftCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLeftCondition(Expression newLeftCondition)
  {
    if (newLeftCondition != leftCondition)
    {
      NotificationChain msgs = null;
      if (leftCondition != null)
        msgs = ((InternalEObject)leftCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SCHPackage.IF__LEFT_CONDITION, null, msgs);
      if (newLeftCondition != null)
        msgs = ((InternalEObject)newLeftCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SCHPackage.IF__LEFT_CONDITION, null, msgs);
      msgs = basicSetLeftCondition(newLeftCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SCHPackage.IF__LEFT_CONDITION, newLeftCondition, newLeftCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getRightCondition()
  {
    return rightCondition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRightCondition(Expression newRightCondition, NotificationChain msgs)
  {
    Expression oldRightCondition = rightCondition;
    rightCondition = newRightCondition;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SCHPackage.IF__RIGHT_CONDITION, oldRightCondition, newRightCondition);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setRightCondition(Expression newRightCondition)
  {
    if (newRightCondition != rightCondition)
    {
      NotificationChain msgs = null;
      if (rightCondition != null)
        msgs = ((InternalEObject)rightCondition).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SCHPackage.IF__RIGHT_CONDITION, null, msgs);
      if (newRightCondition != null)
        msgs = ((InternalEObject)newRightCondition).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SCHPackage.IF__RIGHT_CONDITION, null, msgs);
      msgs = basicSetRightCondition(newRightCondition, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SCHPackage.IF__RIGHT_CONDITION, newRightCondition, newRightCondition));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Expression getResult()
  {
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetResult(Expression newResult, NotificationChain msgs)
  {
    Expression oldResult = result;
    result = newResult;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SCHPackage.IF__RESULT, oldResult, newResult);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setResult(Expression newResult)
  {
    if (newResult != result)
    {
      NotificationChain msgs = null;
      if (result != null)
        msgs = ((InternalEObject)result).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SCHPackage.IF__RESULT, null, msgs);
      if (newResult != null)
        msgs = ((InternalEObject)newResult).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SCHPackage.IF__RESULT, null, msgs);
      msgs = basicSetResult(newResult, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SCHPackage.IF__RESULT, newResult, newResult));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SCHPackage.IF__LOGIC_OPERATOR:
        return basicSetLogicOperator(null, msgs);
      case SCHPackage.IF__LEFT_CONDITION:
        return basicSetLeftCondition(null, msgs);
      case SCHPackage.IF__RIGHT_CONDITION:
        return basicSetRightCondition(null, msgs);
      case SCHPackage.IF__RESULT:
        return basicSetResult(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SCHPackage.IF__LOGIC_OPERATOR:
        return getLogicOperator();
      case SCHPackage.IF__LEFT_CONDITION:
        return getLeftCondition();
      case SCHPackage.IF__RIGHT_CONDITION:
        return getRightCondition();
      case SCHPackage.IF__RESULT:
        return getResult();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SCHPackage.IF__LOGIC_OPERATOR:
        setLogicOperator((LogicOperator)newValue);
        return;
      case SCHPackage.IF__LEFT_CONDITION:
        setLeftCondition((Expression)newValue);
        return;
      case SCHPackage.IF__RIGHT_CONDITION:
        setRightCondition((Expression)newValue);
        return;
      case SCHPackage.IF__RESULT:
        setResult((Expression)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SCHPackage.IF__LOGIC_OPERATOR:
        setLogicOperator((LogicOperator)null);
        return;
      case SCHPackage.IF__LEFT_CONDITION:
        setLeftCondition((Expression)null);
        return;
      case SCHPackage.IF__RIGHT_CONDITION:
        setRightCondition((Expression)null);
        return;
      case SCHPackage.IF__RESULT:
        setResult((Expression)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SCHPackage.IF__LOGIC_OPERATOR:
        return logicOperator != null;
      case SCHPackage.IF__LEFT_CONDITION:
        return leftCondition != null;
      case SCHPackage.IF__RIGHT_CONDITION:
        return rightCondition != null;
      case SCHPackage.IF__RESULT:
        return result != null;
    }
    return super.eIsSet(featureID);
  }

} //IfImpl
