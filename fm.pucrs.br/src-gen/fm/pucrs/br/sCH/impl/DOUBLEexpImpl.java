/**
 * generated by Xtext 2.13.0
 */
package fm.pucrs.br.sCH.impl;

import fm.pucrs.br.sCH.DOUBLEexp;
import fm.pucrs.br.sCH.SCHPackage;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>DOUBL Eexp</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link fm.pucrs.br.sCH.impl.DOUBLEexpImpl#getDvalue <em>Dvalue</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class DOUBLEexpImpl extends AtomImpl implements DOUBLEexp
{
  /**
   * The default value of the '{@link #getDvalue() <em>Dvalue</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDvalue()
   * @generated
   * @ordered
   */
  protected static final String DVALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getDvalue() <em>Dvalue</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDvalue()
   * @generated
   * @ordered
   */
  protected String dvalue = DVALUE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected DOUBLEexpImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SCHPackage.Literals.DOUBL_EEXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getDvalue()
  {
    return dvalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setDvalue(String newDvalue)
  {
    String oldDvalue = dvalue;
    dvalue = newDvalue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SCHPackage.DOUBL_EEXP__DVALUE, oldDvalue, dvalue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SCHPackage.DOUBL_EEXP__DVALUE:
        return getDvalue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SCHPackage.DOUBL_EEXP__DVALUE:
        setDvalue((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SCHPackage.DOUBL_EEXP__DVALUE:
        setDvalue(DVALUE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SCHPackage.DOUBL_EEXP__DVALUE:
        return DVALUE_EDEFAULT == null ? dvalue != null : !DVALUE_EDEFAULT.equals(dvalue);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (dvalue: ");
    result.append(dvalue);
    result.append(')');
    return result.toString();
  }

} //DOUBLEexpImpl
