/**
 * generated by Xtext 2.13.0
 */
package fm.pucrs.br.sCH.impl;

import fm.pucrs.br.sCH.SCHPackage;
import fm.pucrs.br.sCH.STRexp;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>ST Rexp</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * <ul>
 *   <li>{@link fm.pucrs.br.sCH.impl.STRexpImpl#getSvalue <em>Svalue</em>}</li>
 * </ul>
 * </p>
 *
 * @generated
 */
public class STRexpImpl extends AtomImpl implements STRexp
{
  /**
   * The default value of the '{@link #getSvalue() <em>Svalue</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSvalue()
   * @generated
   * @ordered
   */
  protected static final String SVALUE_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getSvalue() <em>Svalue</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSvalue()
   * @generated
   * @ordered
   */
  protected String svalue = SVALUE_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected STRexpImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SCHPackage.Literals.ST_REXP;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getSvalue()
  {
    return svalue;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSvalue(String newSvalue)
  {
    String oldSvalue = svalue;
    svalue = newSvalue;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SCHPackage.ST_REXP__SVALUE, oldSvalue, svalue));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SCHPackage.ST_REXP__SVALUE:
        return getSvalue();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SCHPackage.ST_REXP__SVALUE:
        setSvalue((String)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SCHPackage.ST_REXP__SVALUE:
        setSvalue(SVALUE_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SCHPackage.ST_REXP__SVALUE:
        return SVALUE_EDEFAULT == null ? svalue != null : !SVALUE_EDEFAULT.equals(svalue);
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (svalue: ");
    result.append(svalue);
    result.append(')');
    return result.toString();
  }

} //STRexpImpl
