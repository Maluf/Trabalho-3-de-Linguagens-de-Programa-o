/*
 * generated by Xtext 2.13.0
 */
package fm.pucrs.br.ide.contentassist.antlr;

import com.google.inject.Inject;
import fm.pucrs.br.ide.contentassist.antlr.internal.InternalSCHParser;
import fm.pucrs.br.services.SCHGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SCHParser extends AbstractContentAssistParser {

	@Inject
	private SCHGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSCHParser createParser() {
		InternalSCHParser result = new InternalSCHParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getExpressionAccess().getAlternatives(), "rule__Expression__Alternatives");
					put(grammarAccess.getAtomAccess().getAlternatives(), "rule__Atom__Alternatives");
					put(grammarAccess.getListAccess().getGroup(), "rule__List__Group__0");
					put(grammarAccess.getProgramAccess().getExpressionsAssignment(), "rule__Program__ExpressionsAssignment");
					put(grammarAccess.getIDexpAccess().getNameAssignment(), "rule__IDexp__NameAssignment");
					put(grammarAccess.getINTexpAccess().getIvalueAssignment(), "rule__INTexp__IvalueAssignment");
					put(grammarAccess.getDOUBLEexpAccess().getDvalueAssignment(), "rule__DOUBLEexp__DvalueAssignment");
					put(grammarAccess.getBOOLexpAccess().getBvalueAssignment(), "rule__BOOLexp__BvalueAssignment");
					put(grammarAccess.getSTRexpAccess().getSvalueAssignment(), "rule__STRexp__SvalueAssignment");
					put(grammarAccess.getListAccess().getCalledAssignment_1(), "rule__List__CalledAssignment_1");
					put(grammarAccess.getListAccess().getParamsAssignment_2(), "rule__List__ParamsAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SCHGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SCHGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
