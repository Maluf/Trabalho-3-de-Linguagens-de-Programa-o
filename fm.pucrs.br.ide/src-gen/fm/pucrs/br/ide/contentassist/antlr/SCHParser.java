/*
 * generated by Xtext 2.12.0
 */
package fm.pucrs.br.ide.contentassist.antlr;

import com.google.inject.Inject;
import fm.pucrs.br.ide.contentassist.antlr.internal.InternalSCHParser;
import fm.pucrs.br.services.SCHGrammarAccess;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class SCHParser extends AbstractContentAssistParser {

	@Inject
	private SCHGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalSCHParser createParser() {
		InternalSCHParser result = new InternalSCHParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getTerminalExpressionAccess().getAlternatives(), "rule__TerminalExpression__Alternatives");
					put(grammarAccess.getLogicOperatorAccess().getAlternatives(), "rule__LogicOperator__Alternatives");
					put(grammarAccess.getBoolAccess().getAlternatives(), "rule__Bool__Alternatives");
					put(grammarAccess.getValueAccess().getAlternatives(), "rule__Value__Alternatives");
					put(grammarAccess.getOperatorAccess().getAlternatives(), "rule__Operator__Alternatives");
					put(grammarAccess.getTerminalExpressionAccess().getGroup_0(), "rule__TerminalExpression__Group_0__0");
					put(grammarAccess.getTerminalExpressionAccess().getGroup_1(), "rule__TerminalExpression__Group_1__0");
					put(grammarAccess.getTerminalExpressionAccess().getGroup_2(), "rule__TerminalExpression__Group_2__0");
					put(grammarAccess.getTerminalExpressionAccess().getGroup_3(), "rule__TerminalExpression__Group_3__0");
					put(grammarAccess.getExpressionAccess().getGroup(), "rule__Expression__Group__0");
					put(grammarAccess.getDefineAccess().getGroup(), "rule__Define__Group__0");
					put(grammarAccess.getLambdaAccess().getGroup(), "rule__Lambda__Group__0");
					put(grammarAccess.getIfAccess().getGroup(), "rule__If__Group__0");
					put(grammarAccess.getModelAccess().getExpressionsAssignment(), "rule__Model__ExpressionsAssignment");
					put(grammarAccess.getTerminalExpressionAccess().getValueAssignment_4(), "rule__TerminalExpression__ValueAssignment_4");
					put(grammarAccess.getTerminalExpressionAccess().getIdentifierAssignment_5(), "rule__TerminalExpression__IdentifierAssignment_5");
					put(grammarAccess.getTerminalExpressionAccess().getBoolAssignment_6(), "rule__TerminalExpression__BoolAssignment_6");
					put(grammarAccess.getTerminalExpressionAccess().getStrAssignment_7(), "rule__TerminalExpression__StrAssignment_7");
					put(grammarAccess.getExpressionAccess().getOpAssignment_0(), "rule__Expression__OpAssignment_0");
					put(grammarAccess.getExpressionAccess().getLeftAssignment_1(), "rule__Expression__LeftAssignment_1");
					put(grammarAccess.getExpressionAccess().getRightAssignment_2(), "rule__Expression__RightAssignment_2");
					put(grammarAccess.getDefineAccess().getIdAssignment_1(), "rule__Define__IdAssignment_1");
					put(grammarAccess.getDefineAccess().getExAssignment_2(), "rule__Define__ExAssignment_2");
					put(grammarAccess.getLambdaAccess().getOuputAssignment_2(), "rule__Lambda__OuputAssignment_2");
					put(grammarAccess.getLambdaAccess().getExAssignment_4(), "rule__Lambda__ExAssignment_4");
					put(grammarAccess.getIfAccess().getLogicExAssignment_1(), "rule__If__LogicExAssignment_1");
					put(grammarAccess.getIfAccess().getTrueExAssignment_2(), "rule__If__TrueExAssignment_2");
					put(grammarAccess.getIfAccess().getFalseExAssignment_3(), "rule__If__FalseExAssignment_3");
					put(grammarAccess.getEqualAccess().getEqualAssignment(), "rule__Equal__EqualAssignment");
					put(grammarAccess.getMoreOrEqualAccess().getMoreOrEqualAssignment(), "rule__MoreOrEqual__MoreOrEqualAssignment");
					put(grammarAccess.getLessOrEqualAccess().getLessOrEqualAssignment(), "rule__LessOrEqual__LessOrEqualAssignment");
					put(grammarAccess.getDifferentAccess().getDifferentAssignment(), "rule__Different__DifferentAssignment");
					put(grammarAccess.getMoreAccess().getMoreAssignment(), "rule__More__MoreAssignment");
					put(grammarAccess.getLessAccess().getLessAssignment(), "rule__Less__LessAssignment");
					put(grammarAccess.getSubtractAccess().getMinusAssignment(), "rule__Subtract__MinusAssignment");
					put(grammarAccess.getAddAccess().getPlusAssignment(), "rule__Add__PlusAssignment");
					put(grammarAccess.getMultiplyAccess().getTimesAssignment(), "rule__Multiply__TimesAssignment");
					put(grammarAccess.getDivideAccess().getDivededAssignment(), "rule__Divide__DivededAssignment");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public SCHGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(SCHGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
